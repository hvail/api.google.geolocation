/**
 * Created by hvail on 2019/1/5.
 */
function BaseHash(router, conf) {
    let me = this;
    me.cache = conf.cache;
    router.get('/', (req, res, next) => me.get(req, res, next));
    router.get('/single/:key', (req, res, next) => me.getSingle(req, res, next));
    router.get('/batch/:keys', (req, res, next) => me.getBatch(req, res, next));
    router.post('/', (req, res, next) => me.add(req, res, next));
    router.put('/', (req, res, next) => me.add(req, res, next));
    router.delete('/', (req, res, next) => me.clear(req, res, next));
    router.delete('/:key', (req, res, next) => me.del(req, res, next));
    me._init(conf);
}

BaseHash.prototype._init = function (conf) {
    let me = this;
    me.key = conf.key;
    me.field = conf.field;
};

// 添加一个对象
BaseHash.prototype.add = function (req, res, next) {
    let me = this;
    let obj = req.body;
    me.cache.hset(me.key, obj[me.field], JSON.stringify(obj));
    res.send("1");
};

// 删除一个对象
BaseHash.prototype.del = function (req, res, next) {
    let me = this;
    let {key} = req.params;
    me.cache.hdel(me.key, key);
    res.send("1");
};

// 清空此接口的所有数据
BaseHash.prototype.clear = function (req, res, next) {
    let me = this;
    me.cache.del(me.key);
    res.send("1");
};

// 获取默认的显示值
BaseHash.prototype.get = function (req, res, next) {
    let me = this;
    res.send("v0.1.3 - default " + me.key);
};

// 跟据条件key获取一个对象
BaseHash.prototype.getSingle = function (req, res, next) {
    let me = this;
    let {key} = req.params;
    me.cache.hget(me.key, key, (err, result) => {
        res.send(result);
    });
};

// 跟据条件keys获取多个对象
BaseHash.prototype.getBatch = function (req, res, next) {
    let me = this;
    let {keys} = req.params;
    me.cache.hget(me.key, keys.split(","), (err, result) => {
        res.send(result);
    });
};

module.exports = BaseHash;